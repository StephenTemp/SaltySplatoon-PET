{"version":3,"sources":["logo.svg","Home.js","Profile.js","Reviews.js","ViewReviews.js","ConfirmModal.js","Requests.js","WriteRequestReviews.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Home","props","state","currentTime","logInToken","user","fetch","then","res","json","data","setState","time","requestOptions","method","headers","body","JSON","stringify","console","log","response","className","this","React","Component","Profile","src","logo","alt","href","target","rel","Reviews","Hidden","reviewerName","hiddentextarea","document","getElementById","style","display","reviews","c","handleCollapse","bind","index","reviewsCopy","collapsed","nextProps","key","map","review","Container","fluid","reviewstyle","onClick","Row","Col","h4inlinestyle","reviewer_lastname","reviewer_firstname","date","Collapse","isOpen","textareastyle","margin","padding","width","ViewReviews","myFakeEmployees","x","value","label","fakeReviews","userID","reviewerLName","reviewerFName","dateReviewed","content","obj","myEmployees","userReviews","reviewer","employeeValue","selectedEmployee","currentName","handleEmployeeChange","handleViewEmployee","reviewOptions","employee_emails","employees_of_manager","reviews_list","selectedOptions","copyReviews","length","sortedReviews","parseInt","substring","rever","sort","a","b","localeCompare","xs","justifyContent","Button","color","handleViewMyself","options","isMulti","onChange","placeholder","Reviewstyle","sortstyle","handleSortByDate","border","backgroundColor","fontSize","cursor","ConfirmModal","proceedLabel","cancelLabel","proceedColor","cancelColor","header","proceed","Modal","toggle","onHide","ModalHeader","ModalBody","ModalFooter","hidden","confirm","createConfirmation","confirmable","Requests","requesterName","requests","handleRejectReview","handleTextChange","requestsCopy","e","stopPropagation","ind","request","text_length_left","Date","toLocaleTimeString","saveRequestOptions","requeststyle","h3inlinestyle","requester","split","id","name","rows","sytle","char_count_style","marginRight","saved_at_time","handleSaveReview","handleSendReview","position","left","WriteRequestReviews","fakeRequestPeople","fakeRequests","dateRequested","requestPeople","requestedReviews","requestsValue","selectedRequestReviewers","handleRequestReview","handleRequestChange","possible_reviewers","requestes_list","input","output","Array","from","push","pop","copyRequests","sortedRequests","numPeople","peopleStr","requestEmails","i","reviewer_emails","App","email","password","msg","handleChange","handleClick","event","type","checked","preventDefault","username","access_token","thing","tag","Link","to","exact","path","Form","onSubmit","submitForm","sm","md","size","offset","FormGroup","Label","Input","for","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"iIAAAA,EAAOC,QAAU,IAA0B,kC,oSC6D5BC,E,kDAvDX,WAAYC,GAAQ,IAAD,uBACf,cAAMA,IACDC,MAAQ,CACXC,YAAa,EACbC,WAAY,EAAKH,MAAMG,WACvBC,KAAM,IAGRC,MAAM,SAASC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAAQF,MAAK,SAAAG,GAC1C,EAAKC,SAAS,CACZR,YAAaO,EAAKE,UAGtB,IAAMC,EAAiB,CACrBC,OAAQ,OACRC,QAAS,CAAE,cAAiB,UAAY,EAAKb,MAAME,WAAY,eAAgB,oBAC/EY,KAAMC,KAAKC,UAAU,KAhBR,OAkBfC,QAAQC,IAAIP,GACZP,MAAM,gBAAiBO,GACpBN,MAAK,SAAAc,GAAQ,OAAIA,EAASZ,UAC1BF,MAAK,SAAAG,GAAI,OACR,EAAKC,SAAS,CACdN,KAAMK,EAAKL,UAvBA,E,qDA8Bf,OACE,yBAAKiB,UAAU,OACb,uCACaC,KAAKrB,MAAMG,KADxB,U,GAlCOmB,IAAMC,WCuCVC,E,kDArCX,WAAYzB,GAAQ,IAAD,8BACf,cAAMA,IACDC,MAAQ,CAACC,YAAa,GAE3BG,MAAM,SAASC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAAQF,MAAK,SAAAG,GAC1C,EAAKC,SAAS,CACZR,YAAaO,EAAKE,UANP,E,qDAYf,OACE,yBAAKU,UAAU,OACb,0DAGA,4BAAQA,UAAU,cAChB,yBAAKK,IAAKC,IAAMN,UAAU,WAAWO,IAAI,SACzC,mCACO,4CADP,wBAGA,kDAAwBN,KAAKrB,MAAMC,YAAnC,KACA,uBACEmB,UAAU,WACVQ,KAAK,sBACLC,OAAO,SACPC,IAAI,uBAJN,qB,GAzBQR,IAAMC,W,yCCAtBQ,E,kDACL,WAAYhC,GAAO,IAAD,8BACjB,cAAMA,IAwBPiC,OAAS,SAACC,GACT,IAAIC,EAAiBC,SAASC,eAAe,YACT,SAAjCF,EAAeG,MAAMC,QACvBJ,EAAeG,MAAMC,QAAU,GAE/BJ,EAAeG,MAAMC,QAAU,QA5BhC,EAAKtC,MAAQ,CACZE,WAAY,EAAKH,MAAMG,WACvBqC,QAAS,EAAKxC,MAAMwC,QACpBC,GAAG,GAEJ,EAAKC,eAAiB,EAAKA,eAAeC,KAApB,gBAPL,E,2DAUHC,GACd,IAAIC,EAAW,YAAOvB,KAAKrB,MAAMuC,SACjCtB,QAAQC,IAAI0B,GACZA,EAAYD,GAAOE,WAAaD,EAAYD,GAAOE,UACnDxB,KAAKZ,SAAS,CACb8B,QAASK,M,gDAIeE,GACnBzB,KAAKZ,SAAS,CACV8B,QAASO,EAAUP,Y,+BAapB,IAAD,OAEF,OAAO,yBAAKQ,IAAK,OAAQ1B,KAAKrB,MAAMuC,QAAQS,KAAI,SAACC,EAAQN,GAAT,OAAoBM,EAChE,kBAACC,EAAA,EAAD,CAAWC,MAAM,MACb,uBAAGd,MAAOe,GACN,uBAAGC,QAAW,kBAAM,EAAKZ,eAAeE,KACpC,kBAACO,EAAA,EAAD,KACI,kBAACI,EAAA,EAAD,KAII,kBAACC,EAAA,EAAD,KACI,wBAAIlB,MAAOmB,GAAiBP,EAAOQ,oBAEvC,kBAACF,EAAA,EAAD,KACC,wBAAIlB,MAAOmB,GAAiBP,EAAOS,qBAEpC,kBAACH,EAAA,EAAD,KACI,wBAAIlB,MAAOmB,GAAiBP,EAAOU,UAKnD,kBAACC,EAAA,EAAD,CAAUC,OAAQ,EAAK7D,MAAMuC,QAAQI,GAAOE,WACxC,uBAAGR,MAAOyB,GAAiBb,EAAOA,WAIhD,W,GA/DY3B,IAAMC,WAmEtB6B,EAAc,CACnBW,OAAQ,OACRC,QAAS,OACR,mBAAoB,OACpB,gBAAiB,MACjB,aAAc,mCAOVR,EAAgB,CACrB,aAAc,UAGTM,EAAgB,CACrB,aAAc,OACd,gBAAiB,aACjB,aAAc,SACdG,MAAO,OAGOlC,I,QCxFTmC,E,kDAEF,WAAYnE,GAAQ,IAAD,sBACf,cAAMA,GAEN,IAAIoE,EAAkB,CAAC,aAAc,eAAgB,aAAc,YACnEA,EAAkBA,EAAgBnB,KAAI,SAAAoB,GACpC,MAAQ,CAACC,MAAQD,EAAGE,MAAQF,MAG9B,IAAIG,EAAc,CAChB,CACCC,OAAQ,IACPC,cAAe,cACfC,cAAe,eACfC,aAAc,WACdC,QAAS,idAEX,CACCJ,OAAQ,IACPC,cAAe,cACfC,cAAe,eACfC,aAAc,WACdC,QAAS,sBAEX,CACCJ,OAAQ,IACPC,cAAe,cACfC,cAAe,eACfC,aAAc,WACdC,QAAS,uBA5BE,OAgCfL,EAAcA,EAAYvB,KAAI,SAAA6B,GAE5B,OADAA,EAAG,WAAgB,EACZA,KAGT,EAAK7E,MAAQ,CACXE,WAAY,EAAKH,MAAMG,WACvBD,YAAa,EACb6E,YAAa,GACbC,YAAa,GACbR,YAAaA,EACbS,SAAU,aACVC,cAAe,GACfC,iBAAkB,GAClBC,YAAa,UAEf,EAAKC,qBAAuB,EAAKA,qBAAqB1C,KAA1B,gBAC5B,EAAK2C,mBAAqB,EAAKA,mBAAmB3C,KAAxB,gBAjDX,E,gEAoDC,IAAD,OACX4C,EAAgB,CACpB1E,OAAQ,OACRC,QAAS,CAAE,cAAiB,UAAYQ,KAAKrB,MAAME,WAAY,eAAgB,oBAC/EY,KAAMC,KAAKC,UAAU,CAACuE,gBAAiB,QAEzCnF,MAAM,4BAA6BkF,GAChCjF,MAAK,SAAAc,GAAQ,OAAIA,EAASZ,UAC1BF,MAAK,SAAAG,GAAI,OACR,EAAKC,SAAS,CACZqE,YAAatE,EAAKgF,0BAIxBpF,MAAM,eAAgBkF,GACnBjF,MAAK,SAAAc,GAAQ,OAAIA,EAASZ,UAC1BF,MAAK,SAAAG,GAAI,OACR,EAAKC,SAAS,CACZsE,YAAavE,EAAKiF,oB,2CAMLC,GACnBzE,QAAQC,IAAI,qBAAsBwE,GAClCrE,KAAKZ,SAAS,CACZyE,iBAAkBQ,EAClBT,cAAeS,M,kFAIMA,G,8EACvBzE,QAAQC,IAAI,sBAAuBG,KAAKrB,MAAMkF,kBACxCI,EAAgB,CACpB1E,OAAQ,OACRC,QAAS,CAAE,cAAiB,UAAYQ,KAAKrB,MAAME,WAAY,eAAgB,oBAC/EY,KAAMC,KAAKC,UAAU,CAACuE,gBAAiBlE,KAAKrB,MAAMkF,iBAAiBb,SAErEjE,MAAM,eAAgBkF,GACnBjF,MAAK,SAAAc,GAAQ,OAAIA,EAASZ,UAC1BF,MAAK,SAAAG,GAAI,OACR,EAAKC,SAAS,CACZsE,YAAavE,EAAKiF,kBAIxBpE,KAAKZ,SAAS,CACb0E,YAAa9D,KAAKrB,MAAMkF,iBAAiBZ,MACxCY,iBAAkB,GAClBD,cAAe,K,uLAIIS,G,8EACrBzE,QAAQC,IAAI,sBAAuBG,KAAKrB,MAAMkF,kBACxCI,EAAgB,CACpB1E,OAAQ,OACRC,QAAS,CAAE,cAAiB,UAAYQ,KAAKrB,MAAME,WAAY,eAAgB,oBAC/EY,KAAMC,KAAKC,UAAU,CAACuE,gBAAiB,QAEzCnF,MAAM,eAAgBkF,GACnBjF,MAAK,SAAAc,GAAQ,OAAIA,EAASZ,UAC1BF,MAAK,SAAAG,GAAI,OACR,EAAKC,SAAS,CACZsE,YAAavE,EAAKiF,kBAIxBpE,KAAKZ,SAAS,CACb0E,YAAa,SACZD,iBAAkB,GAClBD,cAAe,K,gJAKjB,IAAIU,EAAW,YAAOtE,KAAKrB,MAAM+E,aACjC,GAAIY,EAAYC,OAAS,EAAE,CAEzB,IAAMC,EAAgBF,EAItB,GAH6D,GAA/CG,SAASD,EAAc,GAAGlC,KAAKoC,UAAU,EAAE,IAAOD,SAASD,EAAc,GAAGlC,KAAKoC,UAAU,EAAE,KAC9C,GAA/CD,SAASD,EAAc,GAAGlC,KAAKoC,UAAU,EAAE,IAAOD,SAASD,EAAc,GAAGlC,KAAKoC,UAAU,EAAE,KAEnG,EAAE,CAER,IAAMC,EAAQL,EAAYM,MAAK,SAACC,EAAGC,GAAJ,OAAUA,EAAExC,KAAKyC,cAAcF,EAAEvC,SAChEtC,KAAKZ,SAAS,CACZsE,YAAciB,QAGd,CAGF,IAAMA,EAAQL,EAAYM,MAAK,SAACC,EAAGC,GAAJ,OAAUD,EAAEvC,KAAKyC,cAAcD,EAAExC,SAChEtC,KAAKZ,SAAS,CACZsE,YAAciB,Q,+BAOZ,IAAD,OAEL,OACE,yBAAK5E,UAAU,OACb,yBAAKA,UAAU,kBACb,kBAAC8B,EAAA,EAAD,CAAWC,MAAM,MACf,kBAACG,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAK8C,GAAG,QACN,wBAAIhE,MAAO,CAACC,QAAS,OAAQgE,eAAgB,SAA7C,eAAmEjF,KAAKrB,MAAMmF,cAEhF,kBAAC5B,EAAA,EAAD,MACA,kBAACA,EAAA,EAAD,CAAK8C,GAAG,KACN,kBAACE,EAAA,EAAD,CAAQC,MAAS,UAAWnD,QAAW,SAACqC,GAAD,OAAqB,EAAKe,iBAAiBf,KAAlF,eAEF,kBAACnC,EAAA,EAAD,CAAK8C,GAAG,KACN,kBAAC,IAAD,CACEK,QAASrF,KAAKrB,MAAM8E,YACpB6B,SAAS,EACTtC,MAAOhD,KAAKrB,MAAMiF,cAClB2B,SAAU,SAAClB,GAAD,OAAqB,EAAKN,qBAAqBM,IACzDmB,YAAa,oBAEjB,kBAACtD,EAAA,EAAD,CAAK8C,GAAG,KACN,kBAACE,EAAA,EAAD,CAAQC,MAAS,UAAWnD,QAAW,SAACqC,GAAD,OAAqB,EAAKL,mBAAmBK,KAApF,uBAKR,kBAACxC,EAAA,EAAD,CAAWC,MAAM,MACf,uBAAGd,MAAOyE,GACV,kBAACxD,EAAA,EAAD,KAEE,kBAACC,EAAA,EAAD,2BACA,kBAACA,EAAA,EAAD,4BACA,kBAACA,EAAA,EAAD,KACE,4BAAQlB,MAAO0E,EAAW1D,QAAW,kBAAM,EAAK2D,qBAAhD,+BAKN,yBAAK5F,UAAY,gBACf,kBAAC,EAAD,CAAQ2B,IAAK,MAAOR,QAAUlB,KAAKrB,MAAM+E,YAAc7E,WAAYmB,KAAKtB,MAAMG,mB,GAtMlEoB,IAAMC,WAgO1BuF,EAAc,CAClB/C,OAAQ,OACRC,QAAS,OACX,gBAAmB,OACnB,aAAgB,MAChB,UAAa,mCAGP+C,EAAY,CAChBE,OAAQ,OACRC,gBAAiB,UACjBC,SAAU,OACVC,OAAQ,UACR9E,QAAS,gBAGI4B,I,gDClPTmD,E,kDAEF,WAAYtH,GAAQ,IAAD,8BACf,cAAMA,IACDC,MAAQ,CACT6D,QAAQ,GAHG,E,qDAOT,IAAD,SASDxC,KAAKtB,MAPTuH,EAFK,EAELA,aACAC,EAHK,EAGLA,YACAC,EAJK,EAILA,aACAC,EALK,EAKLA,YACAC,EANK,EAMLA,OACA5G,EAPK,EAOLA,KACA6G,EARK,EAQLA,QAGA,OACA,yBAAKvG,UAAU,SACX,kBAACwG,EAAA,EAAD,CAAO/D,OAAUxC,KAAKrB,MAAM6D,OAAQgE,OAAQ,WAAKF,GAAQ,GAAQ,EAAKlH,SAAS,CAACoD,QAAQ,KAAUiE,OAAQ,WAAOH,GAAQ,GAAQ,EAAKlH,SAAS,CAACoD,QAAQ,MAChJ,kBAACkE,EAAA,EAAD,KAAcL,GACd,kBAACM,EAAA,EAAD,KACClH,GAED,kBAACmH,EAAA,EAAD,KACA,kBAAC1B,EAAA,EAAD,CACI2B,QAAQX,EACRf,MAAOiB,EACPpE,QAAS,WAAOsE,GAAQ,GAAQ,EAAKlH,SAAS,CAACoD,QAAQ,MAClD0D,GAER,IACD,kBAAChB,EAAA,EAAD,CACIC,MAAOgB,EACPnE,QAAS,WAAOsE,GAAQ,GAAO,EAAKlH,SAAS,CAACoD,QAAQ,MACjDyD,U,GAtCFhG,IAAMC,WA+ClB,SAAS4G,EACpBT,EACA5G,GAMD,IALC0G,EAKF,uDALiB,YACfC,EAIF,uDAJgB,UACdH,EAGF,uDAHiB,MACfC,EAEF,uDAFgB,SACdb,EACF,uDADY,GAEV,OAAO0B,6BAAmBC,sBAAYhB,GAA/Be,CAAA,aACHV,SACA5G,OACA0G,eACAC,cACAH,eACAC,eACGb,I,IC9DL4B,E,kDAEF,WAAYvI,GAAQ,IAAD,8BACf,cAAMA,IA6JViC,OAAS,SAACuG,GACN,IAAIrG,EAAiBC,SAASC,eAAe,YACR,SAAjCF,EAAeG,MAAMC,QACrBJ,EAAeG,MAAMC,QAAU,GAE/BJ,EAAeG,MAAMC,QAAU,QAjKnC,EAAKtC,MAAQ,CACTE,WAAY,EAAKH,MAAMG,WACvBsI,SAAU,EAAKzI,MAAMyI,SACrBhG,GAAG,GAEP,EAAKC,eAAiB,EAAKA,eAAeC,KAApB,gBACtB,EAAK+F,mBAAqB,EAAKA,mBAAmB/F,KAAxB,gBAC1B,EAAKgG,iBAAmB,EAAKA,iBAAiBhG,KAAtB,gBATT,E,2DAYJC,GACX,IAAIgG,EAAY,YAAOtH,KAAKrB,MAAMwI,UAElCG,EAAahG,GAAOE,WAAa8F,EAAahG,GAAOE,UACrDxB,KAAKZ,SAAS,CACV+H,SAAUG,M,gDAKQ7F,GACtBzB,KAAKZ,SAAS,CACV+H,SAAU1F,EAAU0F,a,kFAIHI,EAAGjG,G,qFAExBiG,EAAEC,kB,SACQV,EACN,0BACA,qDAAqD9G,KAAKrB,MAAMwI,SAAS7F,GAApB,UAAwC,IAC7F,SACA,YACA,MACA,U,mCAGQhC,EAAiB,CACrBC,OAAQ,OACRC,QAAS,CAAE,cAAiB,UAAYQ,KAAKtB,MAAMG,WAAY,eAAgB,oBAC/EY,KAAMC,KAAKC,UAAU,CAAC,IAAQK,KAAKrB,MAAMwI,SAAS7F,GAApB,cAEhCvC,MAAM,iBAAkBO,GACrBN,MAAK,SAAAc,GAAQ,OAAIA,EAASZ,UAC1BF,MAAK,SAAAG,GAAI,OACR,EAAKC,SAAS,cAMbY,KAAKrB,MAAMwI,SAAS7F,GAC3BtB,KAAKZ,SAAS,CACV+H,SAAUnH,KAAKrB,MAAMwI,W,iKAUhBI,EAAGE,GAIhB7H,QAAQC,IAAI0H,EAAE/G,OAAOwC,OACrBhD,KAAKZ,SAAS,CAAE+H,SAAUnH,KAAKrB,MAAMwI,SAASxF,KAAI,SAAC+F,EAASpG,GAOxD,OANIA,IAAUmG,IAGVC,EAAQC,iBAAmBJ,EAAE/G,OAAOwC,MAAMuB,OAC1CmD,EAAQnE,QAAUgE,EAAE/G,OAAOwC,OAExB0E,S,uCAMEH,EAAGjG,GAChBtB,KAAKrB,MAAMwI,SAAS7F,GAApB,cAA8C,kBAAmB,IAAIsG,MAAOC,qBAC5E,IAAMvI,EAAiB,CACnBC,OAAQ,OACRC,QAAS,CAAE,cAAiB,UAAYQ,KAAKtB,MAAMG,WAAY,eAAgB,oBAC/EY,KAAMC,KAAKC,UAAU,CAAC,kBAAsBK,KAAKrB,MAAMwI,SAAS7F,GAApB,kBAAiD,QAAYtB,KAAKrB,MAAMwI,SAAS7F,GAApB,WAE7GvC,MAAM,eAAgBO,GAGrBN,MAAK,SAAAc,GAAQ,OAAIA,EAASZ,UAC1BF,MAAK,SAAAG,OAINa,KAAKZ,SAAS,CACV+H,SAAS,YAAKnH,KAAKrB,MAAMwI,c,gFAIVI,EAAGjG,G,gGACZwF,EACN,sBACA,oGACA,UACA,YACA,MACA,U,mCAGQgB,EAAqB,CACvBvI,OAAQ,OACRC,QAAS,CAAE,cAAiB,UAAYQ,KAAKtB,MAAMG,WAAY,eAAgB,oBAC/EY,KAAMC,KAAKC,UAAU,CAAC,kBAAsBK,KAAKrB,MAAMwI,SAAS7F,GAApB,kBAAiD,QAAYtB,KAAKrB,MAAMwI,SAAS7F,GAApB,WAE7GvC,MAAM,eAAgB+I,GAGrB9I,MAAK,SAAAc,GAAQ,OAAIA,EAASZ,UAC1BF,MAAK,SAAAG,OAKAG,EAAiB,CACrBC,OAAQ,OACRC,QAAS,CAAE,cAAiB,UAAYQ,KAAKtB,MAAMG,WAAY,eAAgB,oBAC/EY,KAAMC,KAAKC,UAAU,CAAC,IAAQK,KAAKrB,MAAMwI,SAAS7F,GAApB,cAEhCvC,MAAM,eAAgBO,GACnBN,MAAK,SAAAc,GAAQ,OAAIA,EAASZ,UAC1BF,MAAK,SAAAG,GAAI,OACR,EAAKC,SAAS,OAOF0B,SAASC,eAAe,YAAYiC,aAK/ChD,KAAKrB,MAAMwI,SAAS7F,GAC3BtB,KAAKZ,SAAS,CACV+H,SAAUnH,KAAKrB,MAAMwI,W,yJAuBvB,IAAD,OAML,OAAO,yBAAKzF,IAAK,OAAQ1B,KAAKrB,MAAMwI,SAASxF,KAAI,SAAC+F,EAASpG,GAAV,OAAqBoG,EAElE,kBAAC7F,EAAA,EAAD,CAAWC,MAAM,MACb,uBAAGd,MAAO+G,GACN,uBAAG/F,QAAW,kBAAM,EAAKZ,eAAeE,KACpC,kBAACO,EAAA,EAAD,KACI,kBAACI,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,KACI,wBAAIlB,MAAOgH,GAAiBN,EAAQO,YAExC,kBAAC/F,EAAA,EAAD,KACI,wBAAIlB,MAAOmB,GAAiBuF,EAAQpF,KAAK4F,MAAM,KAAK,GAAG,IAAIR,EAAQpF,KAAK4F,MAAM,KAAK,GAAG,IAAIR,EAAQpF,KAAK4F,MAAM,KAAK,KAEtH,kBAAChG,EAAA,EAAD,CAAK8C,GAAG,QACJ,kBAACE,EAAA,EAAD,CAAQlD,QAAW,SAACuF,GAAO,EAAKH,mBAAmBG,EAAGjG,IAAS6D,MAAQ,QAAvE,sBAKhB,kBAAC5C,EAAA,EAAD,CAAUC,OAAQ,EAAK7D,MAAMwI,SAAS7F,GAAOE,WACzD,8BAAU2G,GAAG,WAAWnF,MAAO0E,EAAQnE,QAASvC,MAAOyB,GAAe2F,KAAK,WAAWC,KAAK,KAAK9C,SAAU,SAACgC,GAAK,EAAKF,iBAAiBE,EAAEjG,MACxH,uBAAG6G,GAAG,aAAaG,MAAOC,IAAoBb,EAAQC,iBAAtD,SACA,6BACA,uBAAG3G,MAAO,CAACC,QAAS,OAAQgE,eAAgB,WAAYvC,OAAO,MAAO8F,YAAa,SAC/E,uBAAGL,GAAG,UAAUnH,MAAO,CAACwH,YAAY,SAAUd,EAAQe,eACtD,kBAACvD,EAAA,EAAD,CAAQiD,GAAG,UAAUnH,MAAO,CAACwH,YAAa,QAASrD,MAAM,YAAYnD,QAAS,SAACuF,GAAD,OAAQ,EAAKmB,iBAAiBnB,EAAGjG,KAA/G,QACA,kBAAC4D,EAAA,EAAD,CAAQiD,GAAG,gBAAgBhD,MAAM,UAAUnD,QAAS,SAACuF,GAAD,OAAQ,EAAKoB,iBAAiBpB,EAAGjG,KAArF,mBAKlB,W,GApNarB,IAAMC,WAwNvB6H,EAAe,CACjBrF,OAAQ,OACRC,QAAS,OACZ,gBAAmB,OACnB,aAAgB,MAChB,UAAa,mCAGRqF,EAAgB,CAClB,UAAa,QAGX7F,EAAgB,CAClB,UAAa,SAGXM,GAAgB,CAClB,UAAa,SACbG,MAAO,OAGL2F,GAAmB,CACrBK,SAAU,WACVC,KAAM,OAoBK5B,KCjQT6B,G,kDAEF,WAAYpK,GAAQ,IAAD,sBACf,cAAMA,GACN,IAAIqK,EAAoB,CAAC,cAAe,YAAa,UAAW,OAChEA,EAAoBA,EAAkBpH,KAAI,SAAAoB,GACxC,MAAQ,CAACC,MAAQD,EAAGE,MAAQF,MAG9B,IAAIiG,EAAe,CACjB,CACE9B,cAAe,WACf+B,cAAe,WACf1F,QAAS,GACToE,iBAAkB,EAClBc,cAAe,IAEjB,CACEvB,cAAe,WACf+B,cAAe,WACf1F,QAAS,GACToE,iBAAkB,EAClBc,cAAe,IAEjB,CACEvB,cAAe,WACf+B,cAAe,WACf1F,QAAS,GACToE,iBAAkB,EAClBc,cAAe,KA3BJ,OA+BfO,EAAeA,EAAarH,KAAI,SAAA6B,GAE9B,OADAA,EAAG,WAAgB,EACZA,KAGT,EAAK7E,MAAQ,CACXE,WAAY,EAAKH,MAAMG,WACvBqK,cAAe,GACfC,iBAAkB,GAClBJ,kBAAmBA,EACnBC,aAAcA,EACdrF,SAAU,aACVyF,cAAe,GACfC,yBAA0B,IAE5B,EAAKC,oBAAsB,EAAKA,oBAAoBjI,KAAzB,gBAC3B,EAAKkI,oBAAsB,EAAKA,oBAAoBlI,KAAzB,gBA/CZ,E,gEAoDC,IAAD,OACX/B,EAAiB,CACrBC,OAAQ,OACRC,QAAS,CAAE,cAAiB,UAAYQ,KAAKrB,MAAME,WAAY,eAAgB,oBAC/EY,KAAMC,KAAKC,UAAU,KAEvBZ,MAAM,0BAA2BO,GAC9BN,MAAK,SAAAc,GAAQ,OAAIA,EAASZ,UAC1BF,MAAK,SAAAG,GAAI,OACR,EAAKC,SAAS,CACZ8J,cAAe/J,EAAKqK,wBAI1BzK,MAAM,yBAA0BO,GAC7BN,MAAK,SAAAc,GAAQ,OAAIA,EAASZ,UAC1BF,MAAK,SAAAG,GAAI,OACR,EAAKC,SAAS,CACZ+J,iBAAkBhK,EAAKsK,sB,0CAMXpF,GAClBrE,KAAKZ,SAAS,CACZiK,yBAA0BhF,EAC1B+E,cAAe/E,M,kCAIPqF,GAEV,IADA,IAAIC,EAASC,MAAMC,KAAKH,GACjBA,EAAMnF,QACXoF,EAAOG,KAAKJ,EAAMK,OAGpB,OADAL,EAAQC,EACDA,I,yCAIP,IAAIK,EAAY,YAAOhK,KAAKrB,MAAMwK,kBAClC,GAAIa,EAAazF,OAAO,EAAE,CAExB,IAAM0F,EAAiBD,EAEvB,GADc,IAAIpC,KAAKqC,EAAe,GAAG3H,MAAM,IAAIsF,KAAKqC,EAAe,GAAG3H,MAClE,EAAE,CAER,IAAMqC,EAAQqF,EAAapF,MAAK,SAACC,EAAGC,GAAJ,OAAUA,EAAExC,KAAKyC,cAAcF,EAAEvC,SACjEtC,KAAKZ,SAAS,CACZ+J,iBAAmBxE,QAGnB,CAEF,IAAMA,EAAQqF,EAAapF,MAAK,SAACC,EAAGC,GAAJ,OAAUD,EAAEvC,KAAKyC,cAAcD,EAAExC,SACjEtC,KAAKZ,SAAS,CACZ+J,iBAAmBxE,Q,mFA+BDN,G,sFAIxB,IAHI6F,EAAYlK,KAAKrB,MAAM0K,yBAAyBrJ,KAAKrB,MAAM0K,yBAAyB9E,OAAO,EAC3F4F,EAAY,GACZC,EAAgB,GACXC,EAAE,EAAEA,EAAEH,EAAUG,IACnBA,EAAE,IACJF,GAAW,MACTE,EAAE,GAAKA,GAAIH,EAAU,IACvBC,GAAW,QACbA,GAAWnK,KAAKrB,MAAM0K,yBAAyBgB,GAAGpH,MAClDmH,EAAcN,KAAK9J,KAAKrB,MAAM0K,yBAAyBgB,GAAGrH,O,gBAElD8D,EACR,0BACAoD,EAAU,EAAI,iDAAiDC,EAAU,IAAI,yDAC7E,UACA,YACAD,EAAU,EAAE,MAAM,OAClBA,EAAU,EAAE,SAAS,M,mCAEb5K,EAAiB,CACrBC,OAAQ,OACRC,QAAS,CAAE,cAAiB,UAAYQ,KAAKrB,MAAME,WAAY,eAAgB,oBAC/EY,KAAMC,KAAKC,UAAU,CAAC2K,gBAAiBF,KAEzCrL,MAAM,wBAAyBO,GAC5BN,MAAK,SAAAc,GAAQ,OAAIA,EAASZ,UAC1BF,MAAK,SAAAG,GAAI,OACR,EAAKC,SAAS,OAKlBY,KAAKZ,SAAS,CACZiK,yBAA0B,GAC1BD,cAAe,K,uJAOb,IAAD,OACL,OACE,yBAAKrJ,UAAU,OACb,yBAAKA,UAAY,mBACjB,kBAAC8B,EAAA,EAAD,CAAWC,MAAM,MACf,kBAACG,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAK8C,GAAG,QACN,wBAAIhE,MAAO,CAACC,QAAS,OAAQgE,eAAgB,SAA7C,qBAEF,kBAAC/C,EAAA,EAAD,MACA,kBAACA,EAAA,EAAD,MACA,kBAACA,EAAA,EAAD,CAAK8C,GAAG,KACJ,kBAAC,IAAD,CACEK,QAASrF,KAAKrB,MAAMuK,cACpB5D,SAAS,EACTtC,MAAOhD,KAAKrB,MAAMyK,cAClB7D,SAAU,SAAClB,GAAD,OAAqB,EAAKkF,oBAAoBlF,IACxDmB,YAAa,qBAEnB,kBAACtD,EAAA,EAAD,CAAK8C,GAAG,KACN,kBAACE,EAAA,EAAD,CAAQC,MAAS,UAAWnD,QAAW,SAACqC,GAAD,OAAqB,EAAKiF,oBAAoBjF,KAArF,uBAKN,yBAAKtE,UAAY,iBACf,kBAAC8B,EAAA,EAAD,CAAWC,MAAM,MACjB,uBAAGd,MAAO+G,IACR,kBAAC9F,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,aAGA,kBAACA,EAAA,EAAD,MACA,kBAACA,EAAA,EAAD,KACE,4BAAQlB,MAAO0E,GAAW1D,QAAW,kBAAM,EAAK2D,qBAAhD,wBAMN,kBAAC,GAAD,CAAUjE,IAAK,MAAOyF,SAAWnH,KAAKrB,MAAMwK,iBAAkBtK,WAAYmB,KAAKtB,MAAMG,mB,GAhOjEoB,IAAMC,WAuOlC6H,GAAe,CACnBrF,OAAQ,OACRC,QAAS,OACX,gBAAmB,OACnB,aAAgB,MAChB,UAAa,mCAGP+C,GAAY,CAChBE,OAAQ,OACRC,gBAAiB,UACjBC,SAAU,OACVC,OAAQ,UACR9E,QAAS,gBAGI6H,MCjDAyB,G,kDArLb,WAAY7L,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAQ,CACXC,YAAa,EACbC,WAAY,GACZ2L,MAAO,GACPC,SAAU,MACVrC,KAAM,GACNsC,IAAK,IAGP,EAAKC,aAAe,EAAKA,aAAatJ,KAAlB,gBACpB,EAAKuJ,YAAc,EAAKA,YAAYvJ,KAAjB,gBAZF,E,gEAeC,IAAD,OACjBrB,KAAKZ,SAAS,CACZR,YAAa,IAGfG,MAAM,SAASC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAAQF,MAAK,SAAAG,GAC1C,EAAKC,SAAS,CACZR,YAAaO,EAAKE,Y,mCAKXwL,GAAQ,IACXrK,EAAWqK,EAAXrK,OACFwC,EAAwB,aAAhBxC,EAAOsK,KAAsBtK,EAAOuK,QAAUvK,EAAOwC,MAC3DoF,EAAS5H,EAAT4H,KACRpI,KAAKZ,SAAL,eACIgJ,EAAQpF,M,iCAIHuE,GAAI,IAAD,OAEZ,GADAA,EAAEyD,iBACGhL,KAAKrB,MAAM6L,MAMhB,GAAKxK,KAAKrB,MAAM8L,SAAhB,CAMA,IAAMnL,EAAiB,CACrBC,OAAQ,OACRC,QAAS,CAAE,eAAgB,oBAC3BC,KAAMC,KAAKC,UAAU,CAAEsL,SAAUjL,KAAKrB,MAAM6L,MAAOC,SAAUzK,KAAKrB,MAAM8L,YAE1E7K,QAAQC,IAAIP,GACZP,MAAM,SAAUO,GACbN,MAAK,SAAAc,GAAQ,OAAIA,EAASZ,UAC1BF,MAAK,SAAAG,GAAI,OACR,EAAKC,SAAS,CACZP,WAAYM,EAAK+L,aACjB9C,KAAMjJ,EAAKiJ,KACXsC,IAAKvL,EAAKuL,cAjBd1K,KAAKZ,SAAS,CACZsL,IAAK,kCAPP1K,KAAKZ,SAAS,CACZsL,IAAK,6B,kCA2BCS,GACVvL,QAAQC,IAAIsL,K,+BAGJ,IAAD,OACP,OACE,kBAAC,IAAD,KACA,yBAAKnK,MAAO,CAAC,aAAc,SACvBhB,KAAKrB,MAAME,WACb,4BAAQmC,MAAO,CAAC,SAAY,QAAS,WAAc,UAAW,MAAS,OAAQ,OAAU,OAAQ,aAAc,QAAS,UAAW,MACjI,yBAAKA,MAAO,CAAC,cAAe,OAAQ,iBAAkB,SACtD,kBAACiB,EAAA,EAAD,CAAKjB,MAAO,CAAC,eAAgB,SAC3B,kBAACkB,EAAA,EAAD,KACE,kBAACgD,EAAA,EAAD,CAAQkG,IAAOC,IAAMlD,GAAG,UAAUmD,GAAG,KAArC,QAAuD,IAEvD,kBAACpG,EAAA,EAAD,CAAQkG,IAAOC,IAAMlD,GAAG,UAAUmD,GAAG,gBAArC,gBAA0E,IAC1E,kBAACpG,EAAA,EAAD,CAAQkG,IAAOC,IAAMlD,GAAG,WAAWmD,GAAG,wBAAtC,0BAEF,yBAAKtK,MAAO,CAAE,gBAAiB,OAAQ,cAAe,QACpD,kBAACiB,EAAA,EAAD,KACA,yBAAKjB,MAAO,CAAC,gBAAiB,OAAQ,cAAe,QAAS,MAAQhB,KAAKrB,MAAMyJ,KAAO,KACxF,kBAAClD,EAAA,EAAD,CAAQkG,IAAOC,IAAMlD,GAAG,UAAUmD,GAAG,IAAItJ,QAAS,kBAAK,EAAK5C,SAAS,CAACP,WAAY,GAAI2L,MAAO,GAAIC,SAAU,UAA3G,iBAoBF,GAWHzK,KAAKrB,MAAME,WAGV,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAO0M,OAAK,EAACC,KAAK,KAChB,kBAAC,EAAD,CAAM3M,WAAYmB,KAAKrB,MAAME,cAE/B,kBAAC,IAAD,CAAO2M,KAAK,YACV,kBAAC,EAAD,OAEF,kBAAC,IAAD,CAAOA,KAAK,gBACV,kBAAC,EAAD,CAAa3M,WAAYmB,KAAKrB,MAAME,cAEtC,kBAAC,IAAD,CAAO2M,KAAK,wBACV,kBAAC,GAAD,CAAqB3M,WAAYmB,KAAKrB,MAAME,eAMlD,kBAACgD,EAAA,EAAD,CAAW9B,UAAU,MAAM+B,MAAM,KAAKd,MAAO,CAAC,aAAc,QAAS,aAAc,OAAQ,UAAa,wBAAyB,KAAQ,MAAO,IAAO,MAAO,SAAY,aAC1K,wBAAIA,MAAO,CAAC,aAAc,WAA1B,WACA,kBAACyK,EAAA,EAAD,CAAM1L,UAAU,OAAO2L,SAAW,SAACnE,GAAD,OAAO,EAAKoE,WAAWpE,KACvD,kBAACrF,EAAA,EAAD,CAAK0J,GAAG,KAAKC,GAAI,CAAEC,KAAM,EAAGC,OAAQ,IAClC,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,cACA,kBAACC,EAAA,EAAD,CACEpB,KAAK,QACL1C,KAAK,QACLD,GAAG,eACHnF,MAAQhD,KAAKrB,MAAM6L,MACnBhF,YAAY,oBACZD,SAAW,SAACgC,GAAD,OAAO,EAAKoD,aAAapD,QAI1C,kBAACrF,EAAA,EAAD,CAAK0J,GAAG,KAAKC,GAAI,CAAEC,KAAM,EAAGC,OAAQ,IAClC,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAOE,IAAI,mBAAX,YACA,kBAACD,EAAA,EAAD,CACEpB,KAAK,WACL1C,KAAK,WACLpF,MAAQhD,KAAKrB,MAAM8L,SACnBtC,GAAG,kBACH3C,YAAY,WACZD,SAAW,SAACgC,GAAD,OAAO,EAAKoD,aAAapD,MAEtC,kBAAC0E,EAAA,EAAD,KAAQjM,KAAKrB,MAAM+L,OAGvB,kBAACxI,EAAA,EAAD,CAAK0J,GAAG,KAAKC,GAAI,CAAEC,KAAM,EAAGC,OAAQ,IAClC,kBAAC7G,EAAA,EAAD,wB,GA5KMjF,IAAMC,WCVJkM,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCVNC,IAASC,OAAO,kBAAC,GAAD,MAAS5L,SAASC,eAAe,SD2H3C,kBAAmB4L,WACrBA,UAAUC,cAAcC,MACrB7N,MAAK,SAAA8N,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLrN,QAAQqN,MAAMA,EAAMC,c","file":"static/js/main.f46b06a8.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.ee7cd8ed.svg\";","import React from 'react';\r\nimport logo from './logo.svg';\r\nimport './App.css';\r\n\r\nclass Home extends React.Component {\r\n    \r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n          currentTime: 0,\r\n          logInToken: this.props.logInToken,\r\n          user: \"\"\r\n        };\r\n    \r\n        fetch('/time').then(res => res.json()).then(data => {\r\n          this.setState({\r\n            currentTime: data.time,\r\n          });\r\n        });\r\n        const requestOptions = {\r\n          method: 'POST',\r\n          headers: { 'Authorization': 'Bearer ' + this.state.logInToken, 'Content-Type': 'application/json' },\r\n          body: JSON.stringify({  })\r\n        };\r\n        console.log(requestOptions)\r\n        fetch('/get-username', requestOptions)\r\n          .then(response => response.json())\r\n          .then(data =>\r\n            this.setState({\r\n            user: data.user,\r\n         })\r\n            // console.log(data)\r\n          );\r\n    }\r\n    \r\n    render() {\r\n        return (\r\n          <div className=\"App\">\r\n            <h1>\r\n                Welcome {this.state.user}!\r\n            </h1>\r\n            {/* <header className=\"App-header\">\r\n              <img src={logo} className=\"App-logo\" alt=\"logo\" />\r\n              <p>\r\n                Edit <code>src/App.js</code> and save to reload.\r\n              </p>\r\n              <p>The current time is {this.state.currentTime}.</p>\r\n              <a\r\n                className=\"App-link\"\r\n                href=\"https://reactjs.org\"\r\n                target=\"_blank\"\r\n                rel=\"noopener noreferrer\"\r\n              >\r\n                Learn React\r\n              </a>\r\n            </header> */}\r\n          </div>\r\n        );\r\n      }\r\n}\r\n\r\nexport default Home;","import React from 'react';\r\nimport logo from './logo.svg';\r\nimport './App.css';\r\n\r\nclass Profile extends React.Component {\r\n    \r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {currentTime: 0};\r\n    \r\n        fetch('/time').then(res => res.json()).then(data => {\r\n          this.setState({\r\n            currentTime: data.time,\r\n          });\r\n        });\r\n    }\r\n    \r\n    render() {\r\n        return (\r\n          <div className=\"App\">\r\n            <p>\r\n                This is the Profile.js file\r\n            </p>\r\n            <header className=\"App-header\">\r\n              <img src={logo} className=\"App-logo\" alt=\"logo\" />\r\n              <p>\r\n                Edit <code>src/App.js</code> and save to reload.\r\n              </p>\r\n              <p>The current time is {this.state.currentTime}.</p>\r\n              <a\r\n                className=\"App-link\"\r\n                href=\"https://reactjs.org\"\r\n                target=\"_blank\"\r\n                rel=\"noopener noreferrer\"\r\n              >\r\n                Learn React\r\n              </a>\r\n            </header>\r\n          </div>\r\n        );\r\n      }\r\n}\r\n\r\nexport default Profile;","import React, { useState } from 'react';\r\nimport './App.css';\r\nimport {Collapse, Container, Col, Row, Button} from 'reactstrap'\r\n\r\nclass Reviews extends React.Component {\r\n\tconstructor(props){\r\n\t\tsuper(props)\r\n\t\tthis.state = {\r\n\t\t\tlogInToken: this.props.logInToken,\r\n\t\t\treviews: this.props.reviews,\r\n\t\t\tc: true\r\n\t\t}\r\n\t\tthis.handleCollapse = this.handleCollapse.bind(this);\r\n\t}\r\n\r\n\thandleCollapse(index){\r\n\t\tlet reviewsCopy = [...this.state.reviews];\r\n\t\tconsole.log(reviewsCopy);\r\n\t\treviewsCopy[index].collapsed = !reviewsCopy[index].collapsed;\r\n\t\tthis.setState({\r\n\t\t\treviews: reviewsCopy\r\n\t\t})\r\n\t}\r\n\r\n\tcomponentWillReceiveProps(nextProps){\r\n        this.setState({\r\n            reviews: nextProps.reviews\r\n        })\r\n    }\r\n\r\n\tHidden = (reviewerName) => {\r\n\t\tvar hiddentextarea = document.getElementById('textarea')\r\n\t\tif(hiddentextarea.style.display === 'none'){\r\n\t\t\thiddentextarea.style.display = ''\r\n\t\t} else{\r\n\t\t\thiddentextarea.style.display = 'none'\r\n\t\t}\r\n\t}\r\n\r\n\trender() {\r\n        //console.log(this.props.todos)\r\n        return <div key={'key'}>{this.state.reviews.map((review, index) => (review ?\r\n            <Container fluid='sm'>\r\n                <p style={reviewstyle}>\r\n                    <p onClick = {() => this.handleCollapse(index)}>\r\n                        <Container>\r\n                            <Row>\r\n                            \t{/* <Col>\r\n                                    <h4 style={h4inlinestyle}>{ review.reviewer_id }</h4>\r\n                                </Col> */}\r\n                                <Col>\r\n                                    <h4 style={h4inlinestyle}>{ review.reviewer_lastname }</h4>\r\n                                </Col>\r\n                                <Col>\r\n                                \t<h4 style={h4inlinestyle}>{ review.reviewer_firstname }</h4>\r\n                                </Col>\r\n                                <Col>\r\n                                    <h4 style={h4inlinestyle}>{ review.date }</h4>\r\n                                </Col>\r\n                            </Row>\r\n                        </Container>\r\n                    </p>\r\n                    <Collapse isOpen={this.state.reviews[index].collapsed}>\r\n                        <p style={textareastyle}>{ review.review }</p>\r\n                    </Collapse>\r\n                </p>\r\n            </Container>\r\n        : \"\"))}</div>;\r\n    }\r\n}\r\n\r\nconst reviewstyle = {\r\n\tmargin: '15px',\r\n\tpadding: '15px',\r\n\t\t'background-color': '#FFF',\r\n\t\t'border-radius': '8px',\r\n\t\t'box-shadow': '0px 0px 10px rgba(0, 0, 0, 0.2)'\r\n}\r\n\r\nconst h3inlinestyle = {\r\n\t'text-align': 'left',\r\n}\r\n\r\nconst h4inlinestyle = {\r\n\t'text-align': 'center',\r\n}\r\n\t\r\nconst textareastyle = {\r\n\t'text-align': 'left',\r\n\t'overflow-wrap': 'break-word',\r\n\t'overflow-y': 'hidden',\r\n\twidth: '80%' \r\n}\r\n\r\nexport default Reviews;","import React from 'react';\r\nimport './App.css';\r\nimport Review from './Reviews'\r\nimport Select from 'react-select';\r\nimport {Container, Row, Col, Button} from 'reactstrap';\r\n\r\nclass ViewReviews extends React.Component {\r\n    \r\n    constructor(props) {\r\n        super(props);\r\n        //let fakeReviewPeople = [\"P1\", \"P2\", \"P3\", \"P4\"]\r\n        let myFakeEmployees = [\"John Smith\", \"Walter White\", \"Big Cheese\", \"The Dude\"]\r\n        myFakeEmployees = myFakeEmployees.map(x => {\r\n          return ({value : x, label : x});\r\n        })\r\n\r\n        let fakeReviews = [\r\n          {\r\n          \tuserID: \"1\",\r\n            reviewerLName: \"Last Name 1\",\r\n            reviewerFName: \"First Name 1\",\r\n            dateReviewed: \"March 31\",\r\n            content: \"My opinion on giving this review is said worker is a person who likes to do a lot of work but I can't tell if he is good at work or if he pays someone else to do it but if that's the case then I don't know why we pay him and not pay the other person but then again my mom tells me I just kinda ramble on and I should sleep more but why sleep when I do nothing important while I sleep. This long run on sentence is brought to you by the testing of wrapping text.\"\r\n          },\r\n          {\r\n          \tuserID: \"2\",\r\n            reviewerLName: \"Last Name 2\",\r\n            reviewerFName: \"First Name 2\",\r\n            dateReviewed: \"March 31\",\r\n            content: \"This is a review 2\"\r\n          },\r\n          {\r\n          \tuserID: \"3\",\r\n            reviewerLName: \"Last Name 3\",\r\n            reviewerFName: \"First Name 3\",\r\n            dateReviewed: \"March 31\",\r\n            content: \"This is a review 3\"\r\n          }\r\n        ]\r\n\r\n        fakeReviews = fakeReviews.map(obj => {\r\n          obj['collapsed'] = false;\r\n          return obj;\r\n        });\r\n\r\n        this.state = {\r\n          logInToken: this.props.logInToken,\r\n          currentTime: 0,\r\n          myEmployees: [],\r\n          userReviews: [],\r\n          fakeReviews: fakeReviews,\r\n          reviewer: \"Reviewer 1\",\r\n          employeeValue: [],\r\n          selectedEmployee: [],\r\n          currentName: \"Myself\"\r\n        };\r\n        this.handleEmployeeChange = this.handleEmployeeChange.bind(this)\r\n        this.handleViewEmployee = this.handleViewEmployee.bind(this)\r\n    }\r\n\r\n    componentDidMount(){\r\n      const reviewOptions = {\r\n        method: 'POST',\r\n        headers: { 'Authorization': 'Bearer ' + this.state.logInToken, 'Content-Type': 'application/json' },\r\n        body: JSON.stringify({employee_emails: null})\r\n      };\r\n      fetch('/get_employees_of_manager', reviewOptions)\r\n        .then(response => response.json())\r\n        .then(data =>\r\n          this.setState({\r\n            myEmployees: data.employees_of_manager,\r\n          }\r\n        )\r\n      );\r\n      fetch('/get-reviews', reviewOptions)\r\n        .then(response => response.json())\r\n        .then(data => \r\n          this.setState({\r\n            userReviews: data.reviews_list,\r\n          }\r\n        )\r\n      );\r\n    }\r\n\r\n    handleEmployeeChange(selectedOptions){\r\n      console.log(\"Current Employee: \", selectedOptions)\r\n      this.setState({\r\n        selectedEmployee: selectedOptions,\r\n        employeeValue: selectedOptions\r\n      })\r\n    }\r\n\r\n    async handleViewEmployee(selectedOptions){\r\n      console.log(\"Changing reviews : \", this.state.selectedEmployee)\r\n      const reviewOptions = {\r\n        method: 'POST',\r\n        headers: { 'Authorization': 'Bearer ' + this.state.logInToken, 'Content-Type': 'application/json' },\r\n        body: JSON.stringify({employee_emails: this.state.selectedEmployee.value})\r\n      };\r\n      fetch('/get-reviews', reviewOptions)\r\n        .then(response => response.json())\r\n        .then(data => \r\n          this.setState({\r\n            userReviews: data.reviews_list,\r\n          }\r\n        )\r\n      );\r\n      this.setState({\r\n      \tcurrentName: this.state.selectedEmployee.label,\r\n        selectedEmployee: [],\r\n        employeeValue: [],\r\n      })\r\n    }\r\n\r\n    async handleViewMyself(selectedOptions){\r\n      console.log(\"Changing reviews : \", this.state.selectedEmployee)\r\n      const reviewOptions = {\r\n        method: 'POST',\r\n        headers: { 'Authorization': 'Bearer ' + this.state.logInToken, 'Content-Type': 'application/json' },\r\n        body: JSON.stringify({employee_emails: null})\r\n      };\r\n      fetch('/get-reviews', reviewOptions)\r\n        .then(response => response.json())\r\n        .then(data => \r\n          this.setState({\r\n            userReviews: data.reviews_list,\r\n          }\r\n        )\r\n      );\r\n      this.setState({\r\n      \tcurrentName: \"Myself\",\r\n        selectedEmployee: [],\r\n        employeeValue: []\r\n      })\r\n    }\r\n\r\n    handleSortByDate(){\r\n      let copyReviews = [...this.state.userReviews]\r\n      if (copyReviews.length > 1){\r\n          // const originalRequest = [...this.state.requestedReviews]\r\n        const sortedReviews = copyReviews\r\n        const time1 = parseInt(sortedReviews[1].date.substring(0,2))*60+parseInt(sortedReviews[1].date.substring(3,5))\r\n        const time2 = parseInt(sortedReviews[0].date.substring(0,2))*60+parseInt(sortedReviews[0].date.substring(3,5))\r\n        const comp = (time1-time2)\r\n        if(comp>0){\r\n          // console.log('date is min', sortedReviews, comp)\r\n          const rever = copyReviews.sort((a, b) => b.date.localeCompare(a.date))\r\n          this.setState({\r\n            userReviews : rever\r\n          })\r\n        }\r\n        else{\r\n          // console.log(time1)\r\n          // console.log(new Date(copyReviews[1].date)-new Date(copyReviews[0].date), '=======', sortedReviews)\r\n          const rever = copyReviews.sort((a, b) => a.date.localeCompare(b.date))\r\n          this.setState({\r\n            userReviews : rever\r\n          })\r\n        }\r\n      }\r\n      \r\n    }\r\n\r\n    render() {\r\n      //console.log(this.state.userReviews)\r\n        return (\r\n          <div className=\"App\">\r\n            <div className=\"view-employees\">\r\n              <Container fluid='sm'>\r\n                <Row>\r\n                  <Col xs='auto'>\r\n                    <h3 style={{display: 'flex', justifyContent: 'left'}}>Reviews for {this.state.currentName}</h3>\r\n                  </Col>\r\n                  <Col></Col>\r\n                  <Col xs='2'>\r\n                    <Button color = {'primary'} onClick = {(selectedOptions) => this.handleViewMyself(selectedOptions)}>My Reviews</Button>\r\n                  </Col>\r\n                  <Col xs='3'>\r\n                    <Select \r\n                      options={this.state.myEmployees}\r\n                      isMulti={false}\r\n                      value={this.state.employeeValue}\r\n                      onChange={(selectedOptions) => this.handleEmployeeChange(selectedOptions)}\r\n                      placeholder={\"View Employees\"}/>\r\n                  </Col>\r\n                  <Col xs='2'>\r\n                    <Button color = {'primary'} onClick = {(selectedOptions) => this.handleViewEmployee(selectedOptions)}>Change Employee</Button>\r\n                  </Col>\r\n                </Row>\r\n              </Container>\r\n            </div>\r\n            <Container fluid='sm'>\r\n              <p style={Reviewstyle}> \r\n              <Row>\r\n                {/* <Col>userID</Col> */}\r\n                <Col>Coworker Last Name</Col>\r\n                <Col>Coworker First Name</Col>\r\n                <Col>\r\n                  <button style={sortstyle} onClick = {() => this.handleSortByDate()}>↑↓Time Posted</button>\r\n                </Col>\r\n              </Row>\r\n              </p>\r\n            </Container>\r\n            <div className = \"view-reviews\">\r\n              <Review key={\"key\"} reviews={ this.state.userReviews } logInToken={this.props.logInToken}/>\r\n            </div>\r\n{/* \r\n              <p>\r\n                This is the ViewReviews.js file. The number is {this.props.number1}.\r\n            </p>\r\n            <header className=\"App-header\">\r\n              <img src={logo} className=\"App-logo\" alt=\"logo\" />\r\n              <p>\r\n                Edit <code>src/App.js</code> and save to reload.\r\n              </p>\r\n              <p>The current time is {this.state.currentTime}.</p>\r\n              <a\r\n                className=\"App-link\"\r\n                href=\"https://reactjs.org\"\r\n                target=\"_blank\"\r\n                rel=\"noopener noreferrer\"\r\n              >\r\n                Learn React\r\n              </a>\r\n            </header> */}\r\n          </div>\r\n        );\r\n      }\r\n}\r\n\r\nconst Reviewstyle = {\r\n  margin: '15px',\r\n  padding: '15px',\r\n'backgroundColor': '#FFF',\r\n'borderRadius': '8px',\r\n'boxShadow': '0px 0px 10px rgba(0, 0, 0, 0.2)'\r\n}\r\n\r\nconst sortstyle = {\r\n  border: 'none',\r\n  backgroundColor: 'inherit',\r\n  fontSize: '16px',\r\n  cursor: 'pointer',\r\n  display: 'inline-block'\r\n}\r\n\r\nexport default ViewReviews;","import React from \"react\";\r\nimport { Button, Modal, ModalHeader, ModalBody, ModalFooter } from 'reactstrap';\r\nimport { confirmable, createConfirmation } from \"react-confirm\";\r\n\r\nclass ConfirmModal extends React.Component {\r\n  \r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            isOpen: true\r\n        }\r\n    }\r\n    \r\n    render() {\r\n        const {\r\n        proceedLabel,\r\n        cancelLabel,\r\n        proceedColor,\r\n        cancelColor,\r\n        header,\r\n        body,\r\n        proceed,\r\n        } = this.props;\r\n\r\n        return (\r\n        <div className=\"modal\">\r\n            <Modal isOpen = {this.state.isOpen} toggle={()=>{proceed(false); this.setState({isOpen: false})}} onHide={() => {proceed(false); this.setState({isOpen: false});}}>\r\n                    <ModalHeader>{header}</ModalHeader>\r\n                    <ModalBody>\r\n                    {body}\r\n                    </ModalBody>\r\n                    <ModalFooter>\r\n                    <Button \r\n                        hidden={cancelLabel?false:true}\r\n                        color={cancelColor}\r\n                        onClick={() => {proceed(false); this.setState({isOpen: false})}}>\r\n                            {cancelLabel}\r\n                    </Button>\r\n                    {' '}\r\n                    <Button \r\n                        color={proceedColor}\r\n                        onClick={() => {proceed(true); this.setState({isOpen: false})}}>\r\n                            {proceedLabel}\r\n                    </Button>\r\n                    </ModalFooter>\r\n                </Modal>\r\n        </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default function confirm (\r\n    header,\r\n    body,\r\n    proceedColor = \"secondary\",\r\n    cancelColor = \"primary\",\r\n    proceedLabel = \"Yes\",\r\n    cancelLabel = \"Cancel\",\r\n    options = {}\r\n) {\r\n    return createConfirmation(confirmable(ConfirmModal))({\r\n        header,\r\n        body,\r\n        proceedColor,\r\n        cancelColor,\r\n        proceedLabel,\r\n        cancelLabel,\r\n        ...options\r\n  });\r\n}\r\n","import React, { useState } from 'react';\r\nimport './App.css';\r\nimport {Collapse, Container, Col, Row, Button} from 'reactstrap'\r\nimport confirm from \"./ConfirmModal\";\r\n\r\nclass Requests extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            logInToken: this.props.logInToken,\r\n            requests: this.props.requests,\r\n            c: true\r\n        }\r\n        this.handleCollapse = this.handleCollapse.bind(this);\r\n        this.handleRejectReview = this.handleRejectReview.bind(this);\r\n        this.handleTextChange = this.handleTextChange.bind(this);\r\n    }\r\n\r\n    handleCollapse(index) {\r\n        let requestsCopy = [...this.state.requests];\r\n        // console.log(requestsCopy);\r\n        requestsCopy[index].collapsed = !requestsCopy[index].collapsed;\r\n        this.setState({\r\n            requests: requestsCopy\r\n        })\r\n    }\r\n\r\n\r\n    componentWillReceiveProps(nextProps){\r\n        this.setState({\r\n            requests: nextProps.requests\r\n        })\r\n    }\r\n\r\n    async handleRejectReview(e, index) {\r\n        // Required for preventing collapse on button click\r\n        e.stopPropagation();\r\n        if (await confirm(\r\n            \"Confirm Request Removal\",\r\n            \"Are you sure you want to reject this request from \"+this.state.requests[index][\"requester\"]+\"?\",\r\n            \"danger\",\r\n            \"secondary\",\r\n            \"Yes\",\r\n            \"Cancel\"\r\n            )) {\r\n\r\n              const requestOptions = {\r\n                method: 'POST',\r\n                headers: { 'Authorization': 'Bearer ' + this.props.logInToken, 'Content-Type': 'application/json' },\r\n                body: JSON.stringify({\"_id\" : this.state.requests[index]['request_id']})\r\n              };\r\n              fetch('/reject_review', requestOptions)\r\n                .then(response => response.json())\r\n                .then(data =>\r\n                  this.setState({\r\n\r\n                  }\r\n                )\r\n              );\r\n\r\n            delete this.state.requests[index];\r\n            this.setState({\r\n                requests: this.state.requests\r\n            })\r\n\r\n\r\n        } else {\r\n\r\n        }\r\n    }\r\n\r\n\r\n    handleTextChange(e, ind) {\r\n        // console.log(\"New text for \" + ind + \"is: \" + e.target.value)\r\n        //console.log(\"Word count is: \" + e.target.value.trim().split(\" \").length);\r\n        // console.log(\"Char count is: \" + e.target.value.length);\r\n        console.log(e.target.value)\r\n        this.setState({ requests: this.state.requests.map((request, index) => {\r\n            if (index === ind){\r\n                // console.log(e.target.value.length)\r\n                // console.log(request.requesterName)\r\n                request.text_length_left = e.target.value.length\r\n                request.content = e.target.value;\r\n            }\r\n            return request\r\n        })\r\n            //text_length_left: e.target.value.length\r\n        })\r\n    }\r\n\r\n    handleSaveReview(e, index){\r\n        this.state.requests[index][\"saved_at_time\"] = \"Last saved at \" + new Date().toLocaleTimeString();\r\n        const requestOptions = {\r\n            method: 'POST',\r\n            headers: { 'Authorization': 'Bearer ' + this.props.logInToken, 'Content-Type': 'application/json' },\r\n            body: JSON.stringify({\"review_content_id\" : this.state.requests[index]['review_content_id'], \"content\" : this.state.requests[index]['content']})\r\n        };\r\n        fetch('/save_review', requestOptions)\r\n        // .then(res => res.text())          // convert to plain text\r\n        // .then(text => console.log(text))\r\n        .then(response => response.json())\r\n        .then(data =>\r\n            {}\r\n        );\r\n\r\n        this.setState({\r\n            requests: [...this.state.requests]\r\n        })\r\n    }\r\n\r\n    async handleSendReview(e, index){\r\n        if (await confirm(\r\n            \"Confirm Send Review\",\r\n            \"Are you sure you want to send this review? You will not be able to make changes after it is sent.\",\r\n            \"primary\",\r\n            \"secondary\",\r\n            \"Yes\",\r\n            \"Cancel\"\r\n            )) {\r\n\r\n              const saveRequestOptions = {\r\n                  method: 'POST',\r\n                  headers: { 'Authorization': 'Bearer ' + this.props.logInToken, 'Content-Type': 'application/json' },\r\n                  body: JSON.stringify({\"review_content_id\" : this.state.requests[index]['review_content_id'], \"content\" : this.state.requests[index]['content']})\r\n              };\r\n              fetch('/save_review', saveRequestOptions)\r\n              // .then(res => res.text())          // convert to plain text\r\n              // .then(text => console.log(text))\r\n              .then(response => response.json())\r\n              .then(data =>\r\n                  {}\r\n              );\r\n\r\n              //IN PROGRESS\r\n              const requestOptions = {\r\n                method: 'POST',\r\n                headers: { 'Authorization': 'Bearer ' + this.props.logInToken, 'Content-Type': 'application/json' },\r\n                body: JSON.stringify({\"_id\" : this.state.requests[index]['request_id']})\r\n              };\r\n              fetch('/send_review', requestOptions)\r\n                .then(response => response.json())\r\n                .then(data =>\r\n                  this.setState({\r\n\r\n                  }\r\n                )\r\n              );\r\n\r\n            // Save the review\r\n            let saveContent = document.getElementById('textarea').value\r\n            // this.setState({ requests: this.state.requests.map(request => {\r\n\r\n            // }) })\r\n\r\n            delete this.state.requests[index];\r\n            this.setState({\r\n                requests: this.state.requests\r\n            })\r\n            // TODO Send the review\r\n        } else {\r\n\r\n        }\r\n    }\r\n\r\n    Hidden = (requesterName) => {\r\n        var hiddentextarea = document.getElementById('textarea')\r\n        if (hiddentextarea.style.display === 'none'){\r\n            hiddentextarea.style.display = ''\r\n        } else {\r\n            hiddentextarea.style.display = 'none'\r\n        }\r\n    }\r\n\r\n    // showSimpleDateFormat() {\r\n    //     var simpleDate = this.props.requests.date.split(\" \")\r\n    //     var stringDate = simpleDate.slice(0, 3)\r\n    //     return stringDate\r\n    // }\r\n\r\n    render() {\r\n\r\n        // if (!this.state.requests) {\r\n        //     this.state.requests = []\r\n        // }\r\n\r\n        return <div key={'key'}>{this.state.requests.map((request, index) => (request ?\r\n        // return <div key={'key'}>{this.props.requests.map((request, index) => (request ?\r\n            <Container fluid='sm'>\r\n                <p style={requeststyle}>\r\n                    <p onClick = {() => this.handleCollapse(index)}>\r\n                        <Container>\r\n                            <Row>\r\n                                <Col>\r\n                                    <h3 style={h3inlinestyle}>{ request.requester }</h3>\r\n                                </Col>\r\n                                <Col>\r\n                                    <h4 style={h4inlinestyle}>{ request.date.split(\" \")[0]+\" \"+request.date.split(\" \")[1]+\" \"+request.date.split(\" \")[2] }</h4>\r\n                                </Col>\r\n                                <Col xs='auto'>\r\n                                    <Button onClick = {(e) => {this.handleRejectReview(e, index)}} color = \"dark\">Reject Request</Button>\r\n                                </Col>\r\n                            </Row>\r\n                        </Container>\r\n                    </p>\r\n                    <Collapse isOpen={this.state.requests[index].collapsed}>\r\n        <textarea id='textarea' value={request.content} style={textareastyle} name='textarea' rows='10' onChange={(e)=>{this.handleTextChange(e,index)}}></textarea>\r\n                        <p id='char_count' sytle={char_count_style} >{request.text_length_left}/5000</p>\r\n                        <br></br>\r\n                        <p style={{display: 'flex', justifyContent: 'flex-end', margin:'5px', marginRight: '15px'}}>\r\n                            <i id='savedat' style={{marginRight:'30px'}}>{request.saved_at_time}</i>\r\n                            <Button id='savebtn' style={{marginRight: '10px'}} color='secondary' onClick={(e) => (this.handleSaveReview(e, index))}>Save</Button>\r\n                            <Button id='sendreviewbtn' color='success' onClick={(e) => (this.handleSendReview(e, index))}>Send Review</Button>\r\n                        </p>\r\n                    </Collapse>\r\n                </p>\r\n            </Container>\r\n        : \"\"))}</div>;\r\n    }\r\n}\r\n\r\nconst requeststyle = {\r\n    margin: '15px',\r\n    padding: '15px',\r\n\t'backgroundColor': '#FFF',\r\n\t'borderRadius': '8px',\r\n\t'boxShadow': '0px 0px 10px rgba(0, 0, 0, 0.2)'\r\n}\r\n\r\nconst h3inlinestyle = {\r\n    'textAlign': 'left',\r\n}\r\n\r\nconst h4inlinestyle = {\r\n    'textAlign': 'right',\r\n}\r\n\r\nconst textareastyle = {\r\n    'overflowY': 'hidden',\r\n    width: '80%'\r\n}\r\n\r\nconst char_count_style = {\r\n    position: 'relative',\r\n    left: '35%'\r\n}\r\n\r\n// function Requests ({faq, index, toggleFAQ}) {\r\n// \treturn (\r\n// \t\t<div\r\n// \t\t\tclassName={\"faq \" + (faq.open ? 'open' : '')}\r\n// \t\t\tkey={index}\r\n// \t\t\tonClick={() => toggleFAQ(index)}\r\n// \t\t>\r\n// \t\t\t<div className=\"faq-question\">\r\n// \t\t\t\t{faq.question}\r\n// \t\t\t</div>\r\n// \t\t\t<div className=\"faq-answer\">\r\n// \t\t\t\t{faq.answer}\r\n// \t\t\t</div>\r\n// \t\t</div>\r\n// \t)\r\n// }\r\n\r\nexport default Requests;\r\n","import React from 'react'\r\nimport './App.css';\r\nimport Requests from './Requests';\r\nimport Select from 'react-select';\r\nimport {Container, Row, Col, Button} from 'reactstrap'\r\nimport confirm from \"./ConfirmModal\";\r\n\r\nclass WriteRequestReviews extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        let fakeRequestPeople = [\"Alexandru M\", \"Alex Zhou\", \"Stephen\", \"Sam\"]\r\n        fakeRequestPeople = fakeRequestPeople.map(x => {\r\n          return ({value : x, label : x});\r\n        })\r\n\r\n        let fakeRequests = [\r\n          {\r\n            requesterName: \"Person 1\",\r\n            dateRequested: \"March 31\",\r\n            content: \"\",\r\n            text_length_left: 0,\r\n            saved_at_time: ''\r\n          },\r\n          {\r\n            requesterName: \"Person 2\",\r\n            dateRequested: \"March 31\",\r\n            content: \"\",\r\n            text_length_left: 0,\r\n            saved_at_time: ''\r\n          },\r\n          {\r\n            requesterName: \"Person 3\",\r\n            dateRequested: \"March 31\",\r\n            content: \"\",\r\n            text_length_left: 0,\r\n            saved_at_time: ''\r\n          }\r\n        ]\r\n\r\n        fakeRequests = fakeRequests.map(obj => {\r\n          obj['collapsed'] = true;\r\n          return obj;\r\n        });\r\n\r\n        this.state = {\r\n          logInToken: this.props.logInToken,\r\n          requestPeople: [],\r\n          requestedReviews: [],\r\n          fakeRequestPeople: fakeRequestPeople,\r\n          fakeRequests: fakeRequests,\r\n          reviewer: \"Reviewer 1\",\r\n          requestsValue: [],\r\n          selectedRequestReviewers: []\r\n        };\r\n        this.handleRequestReview = this.handleRequestReview.bind(this)\r\n        this.handleRequestChange = this.handleRequestChange.bind(this)\r\n    }\r\n\r\n\r\n\r\n    componentDidMount(){\r\n      const requestOptions = {\r\n        method: 'POST',\r\n        headers: { 'Authorization': 'Bearer ' + this.state.logInToken, 'Content-Type': 'application/json' },\r\n        body: JSON.stringify({  })\r\n      };\r\n      fetch('/get-possible-reviewers', requestOptions)\r\n        .then(response => response.json())\r\n        .then(data =>\r\n          this.setState({\r\n            requestPeople: data.possible_reviewers,\r\n          }\r\n        )\r\n      );\r\n      fetch('/get_requested_reviews', requestOptions)\r\n        .then(response => response.json())\r\n        .then(data =>\r\n          this.setState({\r\n            requestedReviews: data.requestes_list,\r\n          }\r\n        )\r\n      );\r\n    }\r\n\r\n    handleRequestChange(selectedOptions){\r\n      this.setState({\r\n        selectedRequestReviewers: selectedOptions,\r\n        requestsValue: selectedOptions\r\n      })\r\n    }\r\n\r\n    reversesort(input){\r\n      var output = Array.from(input)\r\n      while (input.length) {\r\n        output.push(input.pop());\r\n      }\r\n      input = output\r\n      return output\r\n    }\r\n\r\n    handleSortByDate(){\r\n      let copyRequests = [...this.state.requestedReviews]\r\n      if (copyRequests.length>1){\r\n          // const originalRequest = [...this.state.requestedReviews]\r\n        const sortedRequests = copyRequests\r\n        const comp = (new Date(sortedRequests[1].date)-new Date(sortedRequests[0].date))\r\n        if(comp>0){\r\n          // console.log('date is min', sortedRequests, comp)\r\n          const rever = copyRequests.sort((a, b) => b.date.localeCompare(a.date))\r\n          this.setState({\r\n            requestedReviews : rever\r\n          })\r\n        }\r\n        else{\r\n          // console.log(new Date(copyRequests[1].date)-new Date(copyRequests[0].date), '=======', sortedRequests)\r\n          const rever = copyRequests.sort((a, b) => a.date.localeCompare(b.date))\r\n          this.setState({\r\n            requestedReviews : rever\r\n          })\r\n        }\r\n      }\r\n      \r\n      // if (originalRequest.join(',') === sortedRequests.join(',')){\r\n      //   const rever = Array.from(this.reversesort(sortedRequests))\r\n      //   console.log(sortedRequests,'same', reversed, 'reversed', rever)\r\n      //   this.setState({\r\n      //     requestedReviews : rever\r\n      //   })\r\n      // }\r\n      // else{\r\n      //   console.log('not same')\r\n      //   this.setState({\r\n      //     requestedReviews : reversed\r\n      //   })\r\n      // }\r\n      // const reversed = sortedRequests.reverse()\r\n    }\r\n\r\n    // handleSortByName(){\r\n    //   let copyRequests = [...this.state.requestedReviews]\r\n    //   const sortedRequests = copyRequests.sort((a, b) => b.requester.localeCompare(a.requester))\r\n    //   const reversed = sortedRequests.reverse()\r\n    //   this.setState({\r\n    //     requestedReviews : reversed\r\n    //   })\r\n    //   console.log(this.state.requestedReviews, sortedRequests, reversed)\r\n    // }\r\n\r\n    async handleRequestReview(selectedOptions){\r\n      let numPeople = this.state.selectedRequestReviewers?this.state.selectedRequestReviewers.length:0;\r\n      let peopleStr = \"\";\r\n      let requestEmails = []\r\n      for (let i=0;i<numPeople;i++) {\r\n        if (i>0)\r\n          peopleStr+=\", \"\r\n        if (i>0 && i== numPeople-1)\r\n          peopleStr+=\"and \"\r\n        peopleStr+=this.state.selectedRequestReviewers[i].label\r\n        requestEmails.push(this.state.selectedRequestReviewers[i].value)\r\n      }\r\n      if (await confirm(\r\n        \"Confirm Request Reviews\",\r\n        numPeople>0 ? \"Are you sure you want to request reviews from \"+peopleStr+\"?\":\"You have not selected anybody to request reviews from.\",\r\n        \"primary\",\r\n        \"secondary\",\r\n        numPeople>0?\"Yes\":\"Okay\",\r\n        numPeople>0?\"Cancel\":null\r\n        )) {\r\n          const requestOptions = {\r\n            method: 'POST',\r\n            headers: { 'Authorization': 'Bearer ' + this.state.logInToken, 'Content-Type': 'application/json' },\r\n            body: JSON.stringify({reviewer_emails: requestEmails})\r\n          };\r\n          fetch('/send-review-requests', requestOptions)\r\n            .then(response => response.json())\r\n            .then(data =>\r\n              this.setState({\r\n\r\n              }\r\n            )\r\n          );\r\n          this.setState({\r\n            selectedRequestReviewers: [],\r\n            requestsValue: []\r\n          })\r\n        } else {\r\n\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n          <div className=\"App\">\r\n            <div className = \"request-reviews\">\r\n            <Container fluid='sm'>\r\n              <Row>\r\n                <Col xs='auto'>\r\n                  <h3 style={{display: 'flex', justifyContent: 'left'}}>Requests for You</h3>\r\n                </Col>\r\n                <Col></Col>\r\n                <Col></Col>\r\n                <Col xs='3'>\r\n                    <Select\r\n                      options={this.state.requestPeople}\r\n                      isMulti={true}\r\n                      value={this.state.requestsValue}\r\n                      onChange={(selectedOptions) => this.handleRequestChange(selectedOptions)}\r\n                      placeholder={\"Request Reviews\"}/>\r\n                </Col>\r\n                <Col xs='2'>\r\n                  <Button color = {'primary'} onClick = {(selectedOptions) => this.handleRequestReview(selectedOptions)}>Request Reviews</Button>\r\n                </Col>\r\n              </Row>\r\n            </Container>\r\n            </div>\r\n            <div className = \"write-reviews\">\r\n              <Container fluid='sm'>\r\n              <p style={requeststyle}>\r\n                <Row>\r\n                  <Col>\r\n                    Name\r\n                  </Col>\r\n                  <Col></Col>\r\n                  <Col>\r\n                    <button style={sortstyle} onClick = {() => this.handleSortByDate()}>↑↓Date</button>\r\n                    \r\n                  </Col>\r\n                </Row>\r\n                </p>\r\n              </Container>\r\n              <Requests key={\"key\"} requests={ this.state.requestedReviews} logInToken={this.props.logInToken}/>\r\n            </div>\r\n          </div>\r\n        );\r\n      }\r\n}\r\n\r\nconst requeststyle = {\r\n  margin: '15px',\r\n  padding: '15px',\r\n'backgroundColor': '#FFF',\r\n'borderRadius': '8px',\r\n'boxShadow': '0px 0px 10px rgba(0, 0, 0, 0.2)'\r\n}\r\n\r\nconst sortstyle = {\r\n  border: 'none',\r\n  backgroundColor: 'inherit',\r\n  fontSize: '16px',\r\n  cursor: 'pointer',\r\n  display: 'inline-block'\r\n}\r\n\r\nexport default WriteRequestReviews;\r\n","import React from 'react';\r\nimport './App.css';\r\nimport {\r\n  BrowserRouter as Router,\r\n  Switch,\r\n  Route,\r\n  Link\r\n} from \"react-router-dom\";\r\n\r\nimport {\r\n  Container, Col, Form,\r\n  FormGroup, Label, Input,\r\n  Button, Row\r\n} from 'reactstrap';\r\n\r\nimport Home from './Home'\r\nimport Profile from './Profile'\r\nimport ViewReviews from './ViewReviews'\r\nimport WriteRequestReviews from './WriteRequestReviews'\r\n//import './components/layouts/Header.css'\r\n\r\n\r\nclass App extends React.Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      currentTime: 0,\r\n      logInToken: \"\",\r\n      email: \"\",\r\n      password: \"123\",\r\n      name: \"\",\r\n      msg: \"\"\r\n    };\r\n    // this.submitForm = this.submitForm.bind(this);\r\n    this.handleChange = this.handleChange.bind(this);\r\n    this.handleClick = this.handleClick.bind(this);\r\n  }\r\n\r\n  componentDidMount(){\r\n    this.setState({\r\n      currentTime: 0\r\n    });\r\n\r\n    fetch('/time').then(res => res.json()).then(data => {\r\n      this.setState({\r\n        currentTime: data.time,\r\n      });\r\n    });\r\n  }\r\n\r\n  handleChange(event) {\r\n    const { target } = event;\r\n    const value = target.type === 'checkbox' ? target.checked : target.value;\r\n    const { name } = target;\r\n    this.setState({\r\n      [ name ]: value,\r\n    });\r\n  }\r\n\r\n  submitForm(e) {\r\n    e.preventDefault();\r\n    if (!this.state.email) {\r\n      this.setState({\r\n        msg: 'Please enter an Email.'\r\n      });\r\n      return;\r\n    }\r\n    if (!this.state.password) {\r\n      this.setState({\r\n        msg: 'Please enter a Password.'\r\n      });\r\n      return;\r\n    }\r\n    const requestOptions = {\r\n      method: 'POST',\r\n      headers: { 'Content-Type': 'application/json' },\r\n      body: JSON.stringify({ username: this.state.email, password: this.state.password })\r\n    };\r\n    console.log(requestOptions)\r\n    fetch('/login', requestOptions)\r\n      .then(response => response.json())\r\n      .then(data =>\r\n        this.setState({\r\n          logInToken: data.access_token,\r\n          name: data.name,\r\n          msg: data.msg\r\n        })\r\n      );\r\n  }\r\n\r\n  handleClick(thing) {\r\n    console.log(thing);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Router>\r\n      <div style={{\"margin-top\": \"90px\"}} >\r\n        { this.state.logInToken ? (\r\n        <header style={{\"position\": \"fixed\", \"background\": \"#eeeeee\", \"width\": \"100%\", \"height\": \"60px\", \"margin-top\": \"-90px\", \"z-index\": \"1\"}}>\r\n          <div style={{\"padding-top\": \"10px\", \"padding-bottom\": \"10px\"}}>\r\n          <Row style={{\"padding-left\": \"30px\"}}>\r\n            <Col>\r\n              <Button tag = {Link} id='homebtn' to=\"/\">Home</Button>{\" \"}\r\n              {/* <Button tag = {Link} id='profilebtn' to=\"/profile\">Profile</Button>{\" \"} */}\r\n              <Button tag = {Link} id='viewbtn' to=\"/viewreviews\">View Reviews</Button>{\" \"}\r\n              <Button tag = {Link} id='writebtn' to=\"/writerequestreviews\">Write Request Reviews</Button>\r\n            </Col>\r\n            <div style={{ \"padding-right\": \"50px\", \"padding-top\": \"5px\"}}>\r\n              <Row>\r\n              <div style={{\"padding-right\": \"20px\", \"padding-top\": \"6px\"}}>{\"Hi \" + this.state.name + \"!\"}</div>\r\n              <Button tag = {Link} id='signout' to=\"/\" onClick={() =>this.setState({logInToken: \"\", email: \"\", password: \"123\",})}>Sign Out</Button>\r\n              </Row>\r\n            </div>\r\n          </Row>\r\n          {/* <li>\r\n            <Link className='navBtn' id='profilebtn' to=\"/profile\">Profile</Link>\r\n          </li>\r\n          <li>\r\n            <Link className='navBtn' id='viewbtn' to=\"/viewreviews\">View Reviews</Link>\r\n          </li>\r\n          <li>\r\n            <Link className='navBtn' id='writebtn' to=\"/writerequestreviews\">Write Request Reviews</Link>\r\n          </li>\r\n          <li>\r\n            <Link className='navBtn' onClick={() =>this.setState({logInToken: \"\", email: \"\", password: \"123\",})}>Sign Out</Link>\r\n          </li> */}\r\n        </div>\r\n        {/* <hr /> */}\r\n        </header>\r\n        \r\n        ) : \"\"\r\n        }\r\n\r\n        {/*\r\n          A <Switch> looks through all its children <Route>\r\n          elements and renders the first one whose path\r\n          matches the current URL. Use a <Switch> any time\r\n          you have multiple routes, but you want only one\r\n          of them to render at a time\r\n        */}\r\n        \r\n        {this.state.logInToken ? \r\n          ( \r\n          \r\n          <Switch>\r\n            <Route exact path=\"/\">\r\n              <Home logInToken={this.state.logInToken}/>\r\n            </Route>\r\n            <Route path=\"/profile\">\r\n              <Profile />\r\n            </Route>\r\n            <Route path=\"/viewreviews\">\r\n              <ViewReviews logInToken={this.state.logInToken}/>\r\n            </Route>\r\n            <Route path=\"/writerequestreviews\">\r\n              <WriteRequestReviews logInToken={this.state.logInToken}/>\r\n            </Route>\r\n          </Switch>\r\n          \r\n          )\r\n        : \r\n        <Container className=\"App\" fluid=\"sm\" style={{\"margin-top\": \"100px\", \"text-align\": \"left\", \"transform\": \"translate(-50%,-100%)\", \"left\": \"50%\", \"top\": \"50%\", \"position\": \"absolute\"}}>\r\n        <h2 style={{\"text-align\": \"center\"}}>Sign In</h2>\r\n        <Form className=\"form\" onSubmit={ (e) => this.submitForm(e) }>\r\n          <Col sm=\"12\" md={{ size: 6, offset: 3 }}>\r\n            <FormGroup>\r\n              <Label>Email</Label>\r\n              <Input\r\n                type=\"email\"\r\n                name=\"email\"\r\n                id=\"exampleEmail\"\r\n                value={ this.state.email }\r\n                placeholder=\"myemail@email.com\"\r\n                onChange={ (e) => this.handleChange(e) }\r\n              />\r\n            </FormGroup>\r\n          </Col>\r\n          <Col sm=\"12\" md={{ size: 6, offset: 3 }}>\r\n            <FormGroup>\r\n              <Label for=\"examplePassword\">Password</Label>\r\n              <Input\r\n                type=\"password\"\r\n                name=\"password\"\r\n                value={ this.state.password }\r\n                id=\"examplePassword\"\r\n                placeholder=\"********\"\r\n                onChange={ (e) => this.handleChange(e) }\r\n              />\r\n              <Label>{this.state.msg}</Label>\r\n            </FormGroup>\r\n          </Col >\r\n          <Col sm=\"12\" md={{ size: 6, offset: 3 }}>\r\n            <Button>Submit</Button>\r\n          </Col>\r\n        </Form>\r\n      </Container>\r\n        }\r\n      </div>\r\n    </Router>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}